plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow'
    id 'biz.aQute.bnd.builder' apply false
    id 'com.github.hierynomus.license' apply false
    id 'com.jfrog.bintray' apply false
    id 'com.github.breadmoirai.github-release' apply false
}


/* ******************** metadata ******************** */

allprojects {
    group 'com.hivemq'
    version '1.1.4'

    description 'HiveMQ MQTT Client is a MQTT 5.0 and MQTT 3.1.1 compatible and feature-rich high-performance Java ' +
            'client library with different API flavours and backpressure support'

    ext {
        moduleName = 'com.hivemq.client.mqtt'
        readableName = 'HiveMQ MQTT Client'
        githubOrg = 'hivemq'
        githubRepo = 'hivemq-mqtt-client'
        githubUrl = 'https://github.com/' + githubOrg + '/' + githubRepo
        scmConnection = 'scm:git:git://github.com/' + githubOrg + '/' + githubRepo + '.git'
        scmDeveloperConnection = 'scm:git:ssh://git@github.com/' + githubOrg + '/' + githubRepo + '.git'
        issuesUrl = githubUrl + '/issues'
        docUrl = 'https://' + githubOrg + '.github.io/' + githubRepo + '/'
        licenseShortName = 'Apache-2.0'
        licenseReadableName = 'The Apache License, Version 2.0'
        licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        shadedAppendix = 'shaded'
        prevVersion = '1.1.3'
    }
}


/* ******************** java ******************** */

allprojects {
    plugins.withType(JavaPlugin) {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }
    }
}


/* ******************** dependencies ******************** */

allprojects {
    repositories {
        mavenCentral()
    }
}

ext {
    rxJavaVersion = '2.2.19'
    nettyVersion = '4.1.48.Final'
    daggerVersion = '2.27'
    jcToolsVersion = '2.1.2'
    slf4jVersion = '1.7.30'
    jetbrainsAnnotationsVersion = '16.0.3'
}

dependencies {
    api group: 'io.reactivex.rxjava2', name: 'rxjava', version: rxJavaVersion

    implementation group: 'io.netty', name: 'netty-buffer', version: nettyVersion
    implementation group: 'io.netty', name: 'netty-codec', version: nettyVersion
    implementation group: 'io.netty', name: 'netty-common', version: nettyVersion
    implementation group: 'io.netty', name: 'netty-handler', version: nettyVersion
    implementation group: 'io.netty', name: 'netty-transport', version: nettyVersion
    implementation group: 'org.jctools', name: 'jctools-core', version: jcToolsVersion
    implementation group: 'org.jetbrains', name: 'annotations', version: jetbrainsAnnotationsVersion
    implementation group: 'com.google.dagger', name: 'dagger', version: daggerVersion

    compileOnly group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

    annotationProcessor group: 'com.google.dagger', name: 'dagger-compiler', version: daggerVersion
}


/* ******************** optional dependencies ******************** */

def features = ['websocket', 'proxy', 'epoll']
java {
    features.each {
        registerFeature(it) {
            usingSourceSet(sourceSets.main)
        }
    }
}

dependencies {
    websocketImplementation group: 'io.netty', name: 'netty-codec-http', version: nettyVersion
    proxyImplementation group: 'io.netty', name: 'netty-handler-proxy', version: nettyVersion
    epollImplementation group: 'io.netty', name: 'netty-transport-native-epoll', version: nettyVersion, classifier: 'linux-x86_64'
}


/* ******************** test ******************** */

allprojects {
    plugins.withType(JavaPlugin) {
        dependencies {
            def junit5Version = '5.5.1'
            def junitPlatformVersion = '1.5.1'

            testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
            testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit5Version
            testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine',  version: junit5Version
            testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: junitPlatformVersion
        }

        test {
            useJUnitPlatform()
            maxHeapSize = '4096m'
            jvmArgs '-XX:+UseParallelGC'
        }
    }
}

dependencies {
    testImplementation group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.2.0'
    testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.1.7'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.18.3'
    testImplementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.59'
    testImplementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.59'
    testImplementation group: 'com.google.guava', name: 'guava', version: '24.1-jre'
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
}


/* ******************** jars ******************** */

allprojects {
    plugins.withType(JavaLibraryPlugin) {

        project.apply plugin: 'biz.aQute.bnd.builder'

        jar {
            bnd(
                    'Automatic-Module-Name': project.moduleName,
                    'Bundle-Name': project.name,
                    'Bundle-SymbolicName': project.moduleName,
                    'Bundle-Description': project.description,
                    'Bundle-Vendor': 'HiveMQ and the HiveMQ Community',
                    'Bundle-License': project.licenseShortName + ';description="' + project.licenseReadableName + '";link="' + project.licenseUrl + '"',
                    'Bundle-DocURL': project.docUrl,
                    'Bundle-SCM': 'url="' + project.githubUrl + '";connection="' + project.scmConnection + '";developerConnection="' + project.scmDeveloperConnection + '"',
                    'Export-Package': 'com.hivemq.client.annotations.*, com.hivemq.client.mqtt.*, com.hivemq.client.rx.*, com.hivemq.client.util.*',
                    '-consumer-policy': '${range;[==,=+)}',
                    '-removeheaders': 'Private-Package')
        }

        javadoc {
            options.encoding 'UTF-8'
            exclude '**/internal/**'
        }

        task javadocJar(type: Jar) {
            group 'documentation'
            description 'Assembles a jar archive containing the javadoc.'

            from tasks.javadoc
            classifier 'javadoc'
        }

        task sourcesJar(type: Jar) {
            group 'build'
            description 'Assembles a jar archive containing the main sources.'

            from sourceSets.main.allSource
            classifier 'sources'
        }
    }
}

allprojects {
    plugins.withId('com.github.johnrengelman.shadow') {

        shadowJar {
            appendix project.shadedAppendix
            classifier null

            // api: not shaded and relocated, added as dependencies in pom
            dependencies {
                it.exclude(it.dependency('io.reactivex.rxjava2:rxjava'))
                it.exclude(it.dependency('org.reactivestreams:reactive-streams'))
                it.exclude(it.dependency('org.slf4j:slf4j-api'))
            }

            def shadePrefix = project.group.toString() + '.shaded.'
            def shadeFilePrefix = shadePrefix.replace('.', '_')
            relocate 'io.netty', shadePrefix + 'io.netty'
            relocate 'META-INF/native/libnetty', 'META-INF/native/lib' + shadeFilePrefix + 'netty'
            exclude 'META-INF/io.netty.versions.properties'
            relocate 'org.jctools', shadePrefix + 'org.jctools'
            relocate 'org.jetbrains', shadePrefix + 'org.jetbrains'
            relocate 'dagger', shadePrefix + 'dagger'
            relocate 'javax.inject', shadePrefix + 'javax.inject'

            minimize()
        }
    }
}


/* ******************** publishing ******************** */

apply from: "${project.rootDir}/gradle/publishing.gradle"

allprojects {
    plugins.withType(JavaLibraryPlugin) {

        project.apply plugin: 'maven-publish'

        publishing {
            publications {
                withType(MavenPublication) {
                    pom {
                        name = project.readableName
                        description = project.description
                        url = project.githubUrl
                        licenses {
                            license {
                                name = project.licenseReadableName
                                url = project.licenseUrl
                            }
                        }
                        developers {
                            developer {
                                id = 'SG'
                                name = 'Silvio Giebl'
                                email = 'silvio.giebl@hivemq.com'
                            }
                        }
                        scm {
                            connection = project.scmConnection
                            developerConnection = project.scmDeveloperConnection
                            url = project.githubUrl
                        }
                        issueManagement {
                            system = 'github'
                            url = project.issuesUrl
                        }
                    }
                }
                normal(MavenPublication) {
                    from components.java
                    artifact tasks.javadocJar
                    artifact tasks.sourcesJar
                    suppressAllPomMetadataWarnings()
                }
            }
        }

        project.apply plugin: 'com.jfrog.bintray'

        bintray {
            user = project.bintray_username
            key = project.bintray_apiKey
            publish = true
            pkg {
                userOrg = 'hivemq'
                repo = 'HiveMQ'
                name = 'hivemq-mqtt-client'
                desc = project.description
                websiteUrl = project.githubUrl
                issueTrackerUrl = project.issuesUrl
                vcsUrl = project.githubUrl + '.git'
                licenses = [project.licenseShortName]
                labels = ['mqtt', 'mqtt-client', 'iot', 'internet-of-things', 'rxjava2', 'reactive-streams', 'backpressure']
                version {
                    released = new Date()
                    gpg {
                        sign = true
                    }
                    /*mavenCentralSync {
                        user = ''
                        password = ''
                    }*/
                }
            }
        }
        afterEvaluate {
            bintray.publications = publishing.publications.withType(MavenPublication).stream().collect { it.name }
        }

        // workaround for publishing gradle metadata https://github.com/bintray/gradle-bintray-plugin/issues/229
        //noinspection UnnecessaryQualifiedReference
        tasks.withType(com.jfrog.bintray.gradle.tasks.BintrayUploadTask) {
            doFirst {
                publishing.publications.withType(MavenPublication).each { publication ->
                    def moduleFile = new File(new File(new File(project.buildDir, 'publications'), publication.name), 'module.json')
                    if (moduleFile.exists()) {
                        publication.artifact(moduleFile).setExtension('module')
                    }
                }
            }
        }
    }
}

allprojects {
    plugins.withId('com.github.johnrengelman.shadow') {
        publishing {
            publications {
                shaded(MavenPublication) {
                    artifactId project.name + '-' + project.shadedAppendix
                    artifact tasks.shadowJar
                    artifact tasks.javadocJar
                    artifact tasks.sourcesJar
                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        configurations.api.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }
            }
        }
    }
}

features.each { feature ->
    publishing {
        publications {
            create(feature, MavenPublication) {
                artifactId project.name + '-' + feature
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def rootDependencyNode = dependenciesNode.appendNode('dependency')
                    rootDependencyNode.appendNode('groupId', project.group)
                    rootDependencyNode.appendNode('artifactId', project.name)
                    rootDependencyNode.appendNode('version', project.version)
                    rootDependencyNode.appendNode('scope', 'compile')

                    configurations.getByName(feature + 'Implementation').allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'runtime')
                    }
                }
            }
        }
    }
}

apply plugin: 'com.github.breadmoirai.github-release'

githubRelease {
    token project.github_token
    owner project.githubOrg
    repo project.githubRepo
    targetCommitish 'master'
    tagName "v${project.version}"
    releaseName project.version
}


/* ******************** checks ******************** */

allprojects {
    apply plugin: 'com.github.hierynomus.license'

    license {
        header file("${project.rootDir}/HEADER")
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }
}

allprojects {
    apply plugin: 'pmd'

    pmd {
        toolVersion '5.7.0'
    }
}

allprojects {
    plugins.withType(JavaLibraryPlugin) {
        project.apply from: "${project.rootDir}/gradle/japicc.gradle"
    }
}
