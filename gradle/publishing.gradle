/*
Credentials can be stored in a local file named credentials.gradle, which will be ignored by git, in the following
format:

ext {
    bintray_username = '...'
    bintray_apiKey = '...'
    github_token = '...'
}
*/
if (file("${project.rootDir}/gradle/credentials.gradle").exists()) {
    apply from: "${project.rootDir}/gradle/credentials.gradle"
}

/*
Alternatively they can be specified via environment variables:
e.g. via shell script, then either source that script in your shell or call gradle from the script:

#!/bin/sh
export bintray_username="..."
export bintray_apiKey="..."
export github_token="..."

Secure configuration for Travis CI:
Credentials must be stored in the Travis repository settings (https://travis-ci.org/hivemq/hivemq-mqtt-client/settings).
The environment variables are encrypted by Travis and get decrypted before each build.
Availability must be restricted to the master branch (only needed for publishing releases).
*/
['bintray_username', 'bintray_apiKey', 'github_token'].each { propName ->
    if (!project.hasProperty(propName)) {
        project.ext.setProperty(propName, "${System.getenv()[propName]}")
    }
}

void addPom(MavenPublication publication) {
    publication.pom {
        name = project.readableName
        description = project.description
        url = project.githubUrl
        licenses {
            license {
                name = project.licenseReadableName
                url = project.licenseUrl
            }
        }
        developers {
            developer {
                id = 'SG'
                name = 'Silvio Giebl'
                email = 'silvio.giebl@hivemq.com'
            }
        }
        scm {
            connection = project.scmConnection
            developerConnection = project.scmDeveloperConnection
            url = project.githubUrl
        }
        issueManagement {
            system = 'github'
            url = project.issuesUrl
        }
    }
}

publishing {
    publications {
        normal(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
            addPom(it)
        }
        shaded(MavenPublication) {
            artifactId project.name + '-' + project.shadedAppendix
            artifact shadowJar
            artifact javadocJar
            artifact sourcesJar
            addPom(it)
            pom.withXml { xml ->
                def dependenciesNode = xml.asNode().appendNode('dependencies')

                project.configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'compile')
                }
            }
        }
    }
}

bintray {
    user = project.bintray_username
    key = project.bintray_apiKey
    publications = ['normal', 'shaded']
    publish = true
    pkg {
        userOrg = 'hivemq'
        repo = 'HiveMQ'
        name = 'hivemq-mqtt-client'
        desc = project.description
        websiteUrl = project.githubUrl
        issueTrackerUrl = project.issuesUrl
        vcsUrl = project.githubUrl + '.git'
        licenses = [project.licenseShortName]
        labels = ['mqtt', 'mqtt-client', 'iot', 'internet-of-things', 'rxjava2', 'reactive-streams', 'backpressure']
        version {
            released = new Date()
            gpg {
                sign = true
            }
            /*mavenCentralSync {
                user = ''
                password = ''
            }*/
        }
    }
}

githubRelease {
    token project.github_token
    owner project.githubOrg
    repo project.githubRepo
    targetCommitish 'master'
    tagName "v${project.version}"
    releaseName project.version
}
